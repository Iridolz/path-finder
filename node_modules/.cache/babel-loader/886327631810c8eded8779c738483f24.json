{"ast":null,"code":"var _jsxFileName = \"/home/bastien/delivery/perso/path-finder/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const p = {\n    type: 0 // default rect type\n\n  };\n  const size = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    rect: window.innerWidth / 10,\n    rows: parseInt(window.innerHeight / (window.innerWidth / 10)),\n    columns: 10\n  };\n  const [tab, setTab] = useState(Array.from({\n    length: size.columns\n  }, () => Array.from({\n    length: size.rows\n  }, () => Object.create(p))));\n  const [path, setPath] = useState([]);\n\n  if (path.length !== 0) {\n    for (let i = 0; i < path.length; i++) {\n      let newTab = [...tab];\n      newTab[path[i][0]][path[i][1]].type = 5;\n      setTab(newTab);\n    }\n\n    console.log(' OK OK ');\n  } // Rect type\n\n\n  const RectType = [{\n    type: 0,\n    color: 'white',\n    name: 'empty'\n  }, {\n    type: 1,\n    color: 'black',\n    name: 'black'\n  }, {\n    type: 2,\n    color: 'green',\n    name: 'start'\n  }, {\n    type: 3,\n    color: 'red',\n    name: 'end'\n  }, {\n    type: 4,\n    color: 'grey',\n    name: 'checked'\n  }, {\n    type: 5,\n    color: 'blue',\n    name: 'path'\n  }];\n\n  const nextRectType = actual => {\n    return (actual + 1) % 4;\n  };\n\n  const getColorFromType = type => {\n    return RectType[type].color;\n  };\n\n  const RectOnClick = e => {\n    let newTab = [...tab];\n    newTab[e.i][e.n].type = nextRectType(tab[e.i][e.n].type);\n    setTab(newTab);\n  };\n\n  const isRectExist = (i, n) => {\n    if (0 > i || i > size.columns - 1) return false;\n    if (0 > n || n > size.rows - 1) return false;\n    if (tab[i][n].type === 1) return false;\n    return true;\n  };\n\n  const checkPrevMoves = (i, n, prevMoves) => {\n    // console.log(prevMoves)\n    for (let index = 0; index < prevMoves.length; index++) if (prevMoves[index][0] === i && prevMoves[index][1] === n) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const updatePrevMoves = (i, n, prevMoves) => {\n    if (prevMoves.length >= 4) {\n      prevMoves.shift();\n      prevMoves.push([i, n]);\n      return;\n    }\n\n    prevMoves.push([i, n]);\n  };\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const engine = async (i, n, prevMoves) => {\n    // console.log(prevMoves)\n    if (path.length !== 0) {\n      return true;\n    }\n\n    updatePrevMoves(i, n, prevMoves); // prevMoves.push([i, n])\n\n    if (tab[i][n].type === 3) {\n      console.log('FINDED');\n      setPath(...prevMoves);\n      return true;\n    }\n\n    let newTab = [...tab];\n    newTab[i][n].type = 4;\n    setTab(newTab);\n    await sleep(300);\n    var ret;\n\n    if (checkPrevMoves(i + 1, n, prevMoves) === true && isRectExist(i + 1, n) === true) {\n      ret = engine(i + 1, n, prevMoves);\n      if (ret === true) return;\n      prevMoves.push(prevMoves);\n    }\n\n    if (checkPrevMoves(i - 1, n, prevMoves) === true && isRectExist(i - 1, n) === true) {\n      ret = engine(i - 1, n, prevMoves);\n      if (ret === true) return;\n      prevMoves.push(prevMoves);\n    }\n\n    if (checkPrevMoves(i, n + 1, prevMoves) === true && isRectExist(i, n + 1) === true) {\n      ret = engine(i, n + 1, prevMoves);\n      if (ret === true) return;\n      prevMoves.push(prevMoves);\n    }\n\n    if (checkPrevMoves(i, n - 1, prevMoves) === true && isRectExist(i, n - 1) === true) {\n      ret = engine(i, n - 1, prevMoves);\n      if (ret === true) return;\n      prevMoves.push(prevMoves);\n    }\n\n    return [i, n];\n  };\n\n  const run = async () => {\n    await engine(0, 0, new Array());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Stage, {\n      width: size.width,\n      height: size.height,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          x: 0,\n          y: 0,\n          text: \"RUN\",\n          fontSize: 100,\n          onClick: () => run()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), tab.map((row, i) => row.map((column, n) => /*#__PURE__*/_jsxDEV(Rect, {\n          i: i,\n          n: n,\n          x: i * size.rect,\n          y: size.rect + n * (size.height / size.rows),\n          width: size.rect,\n          height: size.rect,\n          fill: getColorFromType(column.type),\n          shadowBlur: 10,\n          onClick: e => RectOnClick(e.target.attrs)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Main, \"DHlEm+bjQoTTsNMcDvuupmHsSpc=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/bastien/delivery/perso/path-finder/src/components/Main.js"],"names":["React","useState","Stage","Layer","Rect","Text","Main","p","type","size","width","window","innerWidth","height","innerHeight","rect","rows","parseInt","columns","tab","setTab","Array","from","length","Object","create","path","setPath","i","newTab","console","log","RectType","color","name","nextRectType","actual","getColorFromType","RectOnClick","e","n","isRectExist","checkPrevMoves","prevMoves","index","updatePrevMoves","shift","push","sleep","ms","Promise","resolve","setTimeout","engine","ret","run","map","row","column","target","attrs"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\n\nfunction Main() {\n    const p = {\n        type: 0 // default rect type\n    }\n\n    const size = {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        rect: window.innerWidth / 10,\n        rows: parseInt(window.innerHeight / (window.innerWidth / 10)),\n        columns: 10,\n    }\n\n    const [tab, setTab] = useState(Array.from({length: size.columns},()=> Array.from({length: size.rows}, () => Object.create(p))));\n    const [path, setPath] = useState([])\n\n    if (path.length !== 0) {\n        for (let i = 0; i < path.length; i++) {\n            let newTab = [...tab]\n            newTab[path[i][0]][path[i][1]].type = 5\n            setTab(newTab)\n        }\n        console.log(' OK OK ')\n    }\n\n    // Rect type\n    const RectType = [\n        {type: 0, color: 'white', name: 'empty'},\n        {type: 1, color: 'black', name: 'black'},\n        {type: 2, color: 'green', name: 'start'},\n        {type: 3, color: 'red', name: 'end'},\n        {type: 4, color: 'grey', name: 'checked'},\n        {type: 5, color: 'blue', name: 'path'},\n    ]\n\n    const nextRectType = (actual) => {\n        return (actual + 1) % 4\n    }\n\n    const getColorFromType = (type) => {\n        return RectType[type].color\n    }\n\n    const RectOnClick = (e) => {\n        let newTab = [...tab]\n        newTab[e.i][e.n].type = nextRectType(tab[e.i][e.n].type)\n        setTab(newTab)\n    }\n\n    const isRectExist = (i, n) => {\n        if (0 > i || i > size.columns - 1)\n            return false\n        if (0 > n || n > size.rows - 1)\n            return false\n        if (tab[i][n].type === 1)\n            return false\n        return true\n    }\n\n    const checkPrevMoves = (i, n, prevMoves) => {\n        // console.log(prevMoves)\n        for (let index = 0; index < prevMoves.length; index++)\n            if (prevMoves[index][0] === i && prevMoves[index][1] === n) {\n                return false\n            }\n        return true\n    }\n\n    const updatePrevMoves = (i, n, prevMoves) => {\n        if (prevMoves.length >= 4) {\n            prevMoves.shift()\n            prevMoves.push([i, n])\n            return\n        }\n        prevMoves.push([i, n])\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const engine = async (i, n, prevMoves) => {\n        // console.log(prevMoves)\n        if (path.length !== 0) {\n            return true\n        }\n        updatePrevMoves(i, n, prevMoves)\n        // prevMoves.push([i, n])\n        if (tab[i][n].type === 3) {\n            console.log('FINDED')\n            setPath(...prevMoves)\n            return true;\n        }\n        let newTab = [...tab]\n        newTab[i][n].type = 4\n        setTab(newTab)\n        await sleep(300)\n        var ret;\n        if (checkPrevMoves(i + 1, n, prevMoves) === true && isRectExist(i + 1, n) === true) {\n            ret = engine(i + 1, n, prevMoves)\n            if (ret === true)\n                return\n            prevMoves.push(prevMoves)\n        }\n        if (checkPrevMoves(i - 1, n, prevMoves) === true && isRectExist(i - 1, n) === true) {\n            ret = engine(i - 1, n, prevMoves)\n            if (ret === true)\n                return\n            prevMoves.push(prevMoves)\n        }\n        if (checkPrevMoves(i, n + 1, prevMoves) === true && isRectExist(i, n + 1) === true) {\n            ret = engine(i, n + 1, prevMoves)\n            if (ret === true)\n                return\n            prevMoves.push(prevMoves)\n        }\n        if (checkPrevMoves(i, n - 1, prevMoves) === true && isRectExist(i, n - 1) === true) {\n            ret = engine(i, n - 1, prevMoves)\n            if (ret === true)\n                return\n            prevMoves.push(prevMoves)\n        }\n        return [i, n]\n    }\n\n    const run = async () => {\n        await engine(0, 0, new Array)\n    }\n\n    return (\n      <div>\n        <Stage width={size.width} height={size.height}>\n          <Layer>\n            <Text\n            x={0}\n            y={0}\n            text='RUN'\n            fontSize={100}\n            onClick={() => run()}\n            />\n            {\n                tab.map((row, i) => (\n                    row.map((column, n) => (\n                        <Rect\n                        i={i}\n                        n={n}\n                        x={i * (size.rect)}\n                        y={(size.rect) + n * (size.height / size.rows)}\n                        width={(size.rect)}\n                        height={(size.rect)}\n                        fill={getColorFromType(column.type)}\n                        shadowBlur={10}\n                        onClick={e => RectOnClick(e.target.attrs)}\n                        />\n                    ))\n                ))\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}